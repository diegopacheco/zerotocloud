
import zerotocloud.*
task cloneRepo(type: CloneRepo) {
    repository = 'https://github.com/Netflix/karyon.git'
}

task patchRepo {
    dependsOn 'cloneRepo'
    doFirst {
        def app = new File(cloneRepo.gitDir, 'karyon2-examples/src/main/java/netflix/karyon/examples/hellonoss/server/jersey/JerseyHelloWorldApp.java')
        def contents = app.text
        app.withWriter { out ->
            out << contents
                    .replace('//, KaryonEurekaModule.class', ', KaryonEurekaModule.class')
                    // It's impossible to test REST calls from a browser if a HTTP Header is required.
                    .replace('interceptorSupport.forUri("/hello").interceptIn(AuthInterceptor.class);', '//interceptorSupport.forUri("/hello").interceptIn(AuthInterceptor.class);')
        }

        def scanning = new File(cloneRepo.gitDir, 'karyon2-examples/src/main/resources/hello-netflix-oss.properties')
        def scanContents = scanning.text
        scanning.withWriter { out ->
            // Let jersey scan Eureka package for healthcheck
            out << scanContents.replace('com.netflix.hellonoss', 'com.netflix.hellonoss,com.netflix.appinfo')
        }
    }
}

task patchEndpoint {
    dependsOn 'cloneRepo'
    doFirst {
        def app = new File(cloneRepo.gitDir, 'karyon-examples/hello-netflix-oss/src/main/java/com/netflix/hellonoss/server/HelloworldResource.java')
        def contents = app.text
        app.withWriter { out ->
            out << contents
                    .replace('Hello Netflix OSS component!', 'Hello Zero To Cloud developer!')
        }

    }
}

task buildRepo(type: Build) {
    dependsOn 'cloneRepo', 'patchRepo'
    mustRunAfter 'patchEndpoint'
    moduleDir = cloneRepo.gitDir
    arguments = [':karyon-examples:distZip', '-x', 'check', '-x', 'signArchives', '-x', 'sourcesJar', '-x','javadocJar', '--stacktrace']
}

import org.apache.tools.ant.filters.*
ospackage {
    def dist = new File(buildRepo.moduleDir, 'karyon-examples/hello-netflix-oss/build/distributions/hello-netflix-oss-2.1.00-RC3.zip')
    from( zipTree(dist) ) {
        into('/opt')
    }
    from(file('root')) {
        into('/')
        filter ReplaceTokens, tokens: [ 'KARYON_OPTS': System.getenv('KARYON_OPTS') ?: '' ]
    }
    postInstall('mv /opt/hello-netflix-oss* /opt/hello-netflix-oss') // zip was nested
    postInstall('echo manual > /etc/init/tomcat7.override')
}
buildDeb.dependsOn(buildRepo)
